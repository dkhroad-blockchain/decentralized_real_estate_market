// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
const Verifier  = artifacts.require('Verifier');
const Proof = require('../../zokrates/code/square/proof.json');
const { BN, expectEvent, expectRevert } = require('openzeppelin-test-helpers');

contract('TestSquareVerifier', accounts => {

  before(async () => {
    this.squareVerifier = await Verifier.new({from: accounts[0]});
  });

  describe('correct verification', () => {
    it('submits correct proof', async () => {
      const tx = await this.squareVerifier.verifyTx(Proof.proof.a,Proof.proof.b,Proof.proof.c,Proof.inputs);
      await expectEvent.inLogs(tx.logs,'Verified');
    });
  });

  describe('incorrect verification', () => {
    it('submits incorrect proof', async () => {
      const tx = await this.squareVerifier.verifyTx(Proof.proof.a,Proof.proof.b,Proof.proof.c,["0x28a41","0x1"]);
      const event = tx.logs.filter(e => e.event == 'Verified');
      expect(event.length == 0).to.equal(true);
    });
  });

});

// Test verification with correct proof
// - use the contents from proof.json generated from zokrates steps


    
// Test verification with incorrect proof
